// Generated by Dagger (https://dagger.dev).
package com.example.diexample.analytics.di;

import com.example.diexample.analytics.ImportantAnalyticsUtility;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AnalyticsModule_ProvideImportantIdFactory implements Factory<String> {
  private final AnalyticsModule module;

  private final Provider<ImportantAnalyticsUtility> importantAnalyticsUtilityProvider;

  public AnalyticsModule_ProvideImportantIdFactory(AnalyticsModule module,
      Provider<ImportantAnalyticsUtility> importantAnalyticsUtilityProvider) {
    this.module = module;
    this.importantAnalyticsUtilityProvider = importantAnalyticsUtilityProvider;
  }

  @Override
  public String get() {
    return provideImportantId(module, importantAnalyticsUtilityProvider.get());
  }

  public static AnalyticsModule_ProvideImportantIdFactory create(AnalyticsModule module,
      Provider<ImportantAnalyticsUtility> importantAnalyticsUtilityProvider) {
    return new AnalyticsModule_ProvideImportantIdFactory(module, importantAnalyticsUtilityProvider);
  }

  public static String provideImportantId(AnalyticsModule instance,
      ImportantAnalyticsUtility importantAnalyticsUtility) {
    return Preconditions.checkNotNull(instance.provideImportantId(importantAnalyticsUtility), "Cannot return null from a non-@Nullable @Provides method");
  }
}
