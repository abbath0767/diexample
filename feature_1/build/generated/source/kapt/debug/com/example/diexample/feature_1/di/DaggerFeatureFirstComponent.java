// Generated by Dagger (https://dagger.dev).
package com.example.diexample.feature_1.di;

import androidx.lifecycle.ViewModelProvider;
import com.example.diexample.analytics.GoogleAnalytics;
import com.example.diexample.feature_1.ui.ActivityFirstFeature;
import com.example.diexample.feature_1.ui.ActivityFirstFeature_MembersInjector;
import com.example.diexample.feature_1.viewmodel.FeatureFirstViewModelFactory;
import com.example.diexample.feature_1.viewmodel.FeatureFirstViewModelFactory_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerFeatureFirstComponent implements FeatureFirstComponent {
  private Provider<GoogleAnalytics> getGoogleAnalyticsProvider;

  private Provider<FeatureFirstViewModelFactory> featureFirstViewModelFactoryProvider;

  private Provider<ViewModelProvider.Factory> provideViewModelFactoryProvider;

  private DaggerFeatureFirstComponent(FeatureFirstDependencies featureFirstDependenciesParam) {

    initialize(featureFirstDependenciesParam);
  }

  public static FeatureFirstComponent.Factory factory() {
    return new Factory();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final FeatureFirstDependencies featureFirstDependenciesParam) {
    this.getGoogleAnalyticsProvider = new com_example_diexample_feature_1_di_FeatureFirstDependencies_getGoogleAnalytics(featureFirstDependenciesParam);
    this.featureFirstViewModelFactoryProvider = FeatureFirstViewModelFactory_Factory.create(getGoogleAnalyticsProvider);
    this.provideViewModelFactoryProvider = DoubleCheck.provider((Provider) featureFirstViewModelFactoryProvider);
  }

  @Override
  public void inject(ActivityFirstFeature activity) {
    injectActivityFirstFeature(activity);}

  private ActivityFirstFeature injectActivityFirstFeature(ActivityFirstFeature instance) {
    ActivityFirstFeature_MembersInjector.injectViewModelFactory(instance, provideViewModelFactoryProvider.get());
    return instance;
  }

  private static final class Factory implements FeatureFirstComponent.Factory {
    @Override
    public FeatureFirstComponent create(FeatureFirstDependencies dependencies,
        FeatureFirstModule featureFirstModule) {
      Preconditions.checkNotNull(dependencies);
      Preconditions.checkNotNull(featureFirstModule);
      return new DaggerFeatureFirstComponent(dependencies);
    }
  }

  private static class com_example_diexample_feature_1_di_FeatureFirstDependencies_getGoogleAnalytics implements Provider<GoogleAnalytics> {
    private final FeatureFirstDependencies featureFirstDependencies;

    com_example_diexample_feature_1_di_FeatureFirstDependencies_getGoogleAnalytics(
        FeatureFirstDependencies featureFirstDependencies) {
      this.featureFirstDependencies = featureFirstDependencies;
    }

    @Override
    public GoogleAnalytics get() {
      return Preconditions.checkNotNull(featureFirstDependencies.getGoogleAnalytics(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
