// Generated by Dagger (https://dagger.dev).
package com.example.diexample.feature_2.di;

import com.example.diexample.feature_2.ui.FragmentSecondFeature;
import com.example.diexample.feature_2.ui.FragmentSecondFeature_MembersInjector;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerFeatureSecondComponent implements FeatureSecondComponent {
  private final FeatureSecondDependencies featureSecondDependencies;

  private DaggerFeatureSecondComponent(FeatureSecondDependencies featureSecondDependenciesParam) {
    this.featureSecondDependencies = featureSecondDependenciesParam;
  }

  public static FeatureSecondComponent.Factory factory() {
    return new Factory();
  }

  @Override
  public void inject(FragmentSecondFeature fragment) {
    injectFragmentSecondFeature(fragment);}

  private FragmentSecondFeature injectFragmentSecondFeature(FragmentSecondFeature instance) {
    FragmentSecondFeature_MembersInjector.injectCoreApi(instance, Preconditions.checkNotNull(featureSecondDependencies.getCoreApi(), "Cannot return null from a non-@Nullable component method"));
    FragmentSecondFeature_MembersInjector.injectAdjust(instance, Preconditions.checkNotNull(featureSecondDependencies.getAdjustAnalytics(), "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  private static final class Factory implements FeatureSecondComponent.Factory {
    @Override
    public FeatureSecondComponent create(FeatureSecondDependencies dependencies,
        FeatureSecondModule featureSecondModule) {
      Preconditions.checkNotNull(dependencies);
      Preconditions.checkNotNull(featureSecondModule);
      return new DaggerFeatureSecondComponent(dependencies);
    }
  }
}
